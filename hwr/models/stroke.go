// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Stroke Stroke
//
// Representation of a stroke, that is the capture of an user writing input between the moment when the writing device touches the writing surface and the moment when it is lifted from the surface. See https://developer.myscript.com/docs/interactive-ink/latest/web/myscriptjs/editing/ for information about the components of a stroke
//
// swagger:model Stroke
type Stroke struct {

	// An optional id for the stroke
	ID string `json:"id,omitempty"`

	// The list of pressure information of the stroke
	P []float32 `json:"p"`

	// The pointer id
	PointerID int32 `json:"pointerId,omitempty"`

	// The pointer type for the stroke
	// Enum: [PEN TOUCH ERASER]
	PointerType string `json:"pointerType,omitempty"`

	// The list of timestamps of the stroke
	T []int64 `json:"t"`

	// The list of x coordinates of the stroke
	// Required: true
	X []float32 `json:"x"`

	// The list of y coordinates of the stroke
	// Required: true
	Y []float32 `json:"y"`
}

// Validate validates this stroke
func (m *Stroke) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePointerType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateX(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateY(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var strokeTypePointerTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PEN","TOUCH","ERASER"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		strokeTypePointerTypePropEnum = append(strokeTypePointerTypePropEnum, v)
	}
}

const (

	// StrokePointerTypePEN captures enum value "PEN"
	StrokePointerTypePEN string = "PEN"

	// StrokePointerTypeTOUCH captures enum value "TOUCH"
	StrokePointerTypeTOUCH string = "TOUCH"

	// StrokePointerTypeERASER captures enum value "ERASER"
	StrokePointerTypeERASER string = "ERASER"
)

// prop value enum
func (m *Stroke) validatePointerTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, strokeTypePointerTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Stroke) validatePointerType(formats strfmt.Registry) error {

	if swag.IsZero(m.PointerType) { // not required
		return nil
	}

	// value enum
	if err := m.validatePointerTypeEnum("pointerType", "body", m.PointerType); err != nil {
		return err
	}

	return nil
}

func (m *Stroke) validateX(formats strfmt.Registry) error {

	if err := validate.Required("x", "body", m.X); err != nil {
		return err
	}

	return nil
}

func (m *Stroke) validateY(formats strfmt.Registry) error {

	if err := validate.Required("y", "body", m.Y); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Stroke) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Stroke) UnmarshalBinary(b []byte) error {
	var res Stroke
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
