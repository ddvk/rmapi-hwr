// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Configuration Configuration
//
// The configuration for the recognition. See explanation for parameters in https://developer.myscript.com/docs/interactive-ink/latest/reference/web/configuration-rest/
//
// swagger:model Configuration
type Configuration struct {

	// always connected
	AlwaysConnected bool `json:"alwaysConnected,omitempty"`

	// diagram
	Diagram *DiagramConfiguration `json:"diagram,omitempty"`

	// export
	Export *ExportConfiguration `json:"export,omitempty"`

	// lang
	Lang string `json:"lang,omitempty"`

	// math
	Math *MathConfiguration `json:"math,omitempty"`

	// raw content
	RawContent *RawContentConfiguration `json:"raw-content,omitempty"`

	// text
	Text *TextConfiguration `json:"text,omitempty"`
}

// Validate validates this configuration
func (m *Configuration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiagram(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExport(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRawContent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateText(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Configuration) validateDiagram(formats strfmt.Registry) error {

	if swag.IsZero(m.Diagram) { // not required
		return nil
	}

	if m.Diagram != nil {
		if err := m.Diagram.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diagram")
			}
			return err
		}
	}

	return nil
}

func (m *Configuration) validateExport(formats strfmt.Registry) error {

	if swag.IsZero(m.Export) { // not required
		return nil
	}

	if m.Export != nil {
		if err := m.Export.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("export")
			}
			return err
		}
	}

	return nil
}

func (m *Configuration) validateMath(formats strfmt.Registry) error {

	if swag.IsZero(m.Math) { // not required
		return nil
	}

	if m.Math != nil {
		if err := m.Math.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("math")
			}
			return err
		}
	}

	return nil
}

func (m *Configuration) validateRawContent(formats strfmt.Registry) error {

	if swag.IsZero(m.RawContent) { // not required
		return nil
	}

	if m.RawContent != nil {
		if err := m.RawContent.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw-content")
			}
			return err
		}
	}

	return nil
}

func (m *Configuration) validateText(formats strfmt.Registry) error {

	if swag.IsZero(m.Text) { // not required
		return nil
	}

	if m.Text != nil {
		if err := m.Text.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("text")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Configuration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Configuration) UnmarshalBinary(b []byte) error {
	var res Configuration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
